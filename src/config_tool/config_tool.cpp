#include <iostream>
#include <fstream>
#include <cstring>
#include <unistd.h>
#include "gtkmm.h"
#include "libglademm.h"

void HandlerBnRun();
void HandlerBnQuit();
void Close();
void *ScrollThread(void *args);

Glib::RefPtr<Gnome::Glade::Xml> glade;
Gtk::Window *win_main;
pthread_t scroll_thread;

int main(int argc, char **argv) {
	
	Gtk::Main gtk_main(argc, argv);
	
	glade = Gnome::Glade::Xml::create("data/config_tool.glade");
	
	glade->get_widget("win_main", win_main);
	
	Gtk::Button *bn_run;
	Gtk::Button *bn_quit;
	glade->get_widget("bn_run", bn_run);
	glade->get_widget("bn_quit", bn_quit);
	bn_run->signal_clicked().connect(SigC::slot(HandlerBnRun));
	bn_quit->signal_clicked().connect(SigC::slot(HandlerBnQuit));

	Gtk::Main::run(*win_main);
}

static const char *head = 
	"; The Lab Demos :: 3D engine configuration file\n"
	"; ---------------------------------------\n"
	"; this file is generated by config_tool (our GUI demo configuration\n"
	"; tool) so your best bet would be using that tool to configure the demo.\n"
	"; If that does not work for some reason, modify this file with care...\n\n";

void HandlerBnRun() {
	using namespace std;

	ofstream file("3dengfx.conf");
	if(!file.is_open()) {
		cerr << "could not open 3dengfx.conf for writing\n";
		win_main->hide();
	}

	file << head;

	// get pointers to all controls of interest
	Gtk::Combo *cmb_res;
	Gtk::RadioButton *rad_fullscreen, *rad_windowed;
	Gtk::RadioButton *rad_32bpp, *rad_16bpp;
	Gtk::RadioButton *rad_z32, *rad_z16;
	Gtk::CheckButton *chk_dont_care_bpp, *chk_dont_care_z;
	Gtk::Entry *tex_cmdline;
	
	glade->get_widget("cmb_res", cmb_res);
	glade->get_widget("rad_fullscreen", rad_fullscreen);
	glade->get_widget("rad_windowed", rad_windowed);
	glade->get_widget("rad_32bpp", rad_32bpp);
	glade->get_widget("rad_16bpp", rad_16bpp);
	glade->get_widget("rad_z32", rad_z32);
	glade->get_widget("rad_z16", rad_z16);
	glade->get_widget("chk_dont_care_bpp", chk_dont_care_bpp);
	glade->get_widget("chk_dont_care_z", chk_dont_care_z);
	glade->get_widget("tex_cmdline", tex_cmdline);
	
	file << "resolution = " << cmb_res->get_entry()->get_text() << endl;
	file << "fullscreen = " << (rad_fullscreen->get_active() ? "true" : "false") << endl;
	file << "bpp = " << (chk_dont_care_bpp->get_active() ? "dontcare" : 
						(rad_32bpp->get_active() ? "32" : "16")) << endl;
	file << "zbuffer = " << (chk_dont_care_z->get_active() ? "dontcare" :
						(rad_z32->get_active() ? "32" : "16")) << endl;

	file << "stencil = dontcare" << endl;
	file.close();

	char cmdline[512], bin[] = "bin/demo";
	strcpy(cmdline, tex_cmdline->get_text().c_str());

	char *argv[100];
	for(int i=0; i<100; i++) {
		argv[i] = bin;
	}
	int i=0;
	argv[0] = bin;
	do {
		i++;
		argv[i] = strtok(i>1 ? 0 : cmdline, " ");
	} while(argv[i] && i < 99);
	
	Close();
	if(execv(bin, argv) == -1) {
		perror("could not exec bin/demo");
	}
}

void HandlerBnQuit() {
	Close();
}

void Close() {
	win_main->hide();
}
